{"version":3,"sources":["game/Ship.js","game/Gameboard.js","game/Player.js","components/board.js","App.js","serviceWorker.js","index.js"],"names":["Ship","length","this","hitList","Array","fill","location","Error","newList","reduce","prev","curr","Gameboard","size","row","carrier","battleship","cruiser","submarine","destroyer","ships","ship","pos","shipLocs","updateShipLocs","hitMatrix","i","push","sunken","shipIndex","x","y","horizontal","oldPos","err","placeShip","newCoords","Math","floor","random","success","shipHit","hit","isSunk","forEach","obj","idx","j","Player","oppBoard","placeShipsRandom","col","receiveAttack","coords","randomAttack","allSunk","Board","props","plyr","state","player","dragging","handleClick","bind","handleDrag","handleDrop","winner","cpu","pregame","getBoard","rotateShip","setState","turn","attack","nextTurn","wonGame","console","log","randomize","squares","color","inner","key","className","draggable","onDragStart","onDragOver","e","preventDefault","onClick","onDrop","React","Component","App","startGame","boardWinner","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a912aee.chunk.js","sourcesContent":["class Ship {\n    constructor(length) {\n        this.length = length;\n        this.hitList = Array(length).fill(false);\n    }\n\n    hit(location) {\n        if (location < 0 || location >= this.length) throw new Error('Illegal Argument Exception');\n        if (this.hitList[location]) throw new Error('Already hit');\n        const newList = [...this.hitList];\n        newList[location] = true;\n        this.hitList = newList;\n    }\n\n    isSunk() {\n        return this.hitList.reduce((prev, curr) => {\n            return prev && curr;\n        }, true);\n    }\n}\n\nexport default Ship;\n","import Ship from './Ship';\n\nclass Gameboard {\n    constructor(size) {\n        this.size = 10;\n        const carrier = new Ship(5);\n        const battleship = new Ship(4);\n        const cruiser = new Ship(3);\n        const submarine = new Ship(3);\n        const destroyer = new Ship(2);\n        this.ships = [{ship: carrier, pos: [0, 0, true]},\n        {ship: battleship, pos: [0, 2, true]},\n        {ship: cruiser, pos: [0, 4, true]},\n        {ship: submarine, pos: [0, 6, true]},\n        {ship: destroyer, pos: [0, 8, true]}];\n        this.shipLocs = this.updateShipLocs();\n        this.hitMatrix = [];\n        let row;\n        for (let i = 0; i < this.size; i++) {\n            row = Array(this.size).fill(false);\n            this.hitMatrix.push(row);\n        }\n        this.sunken = 0;\n    }\n\n    placeShip(shipIndex, x, y, horizontal) {\n        if (x > 10 || y > 10) throw new Error('Ship off board');\n        if (horizontal && x + this.ships[shipIndex].ship.length > 10) return;\n        if (!horizontal && y +this.ships[shipIndex].ship.length > 10) return;\n        const oldPos = [...this.ships[shipIndex].pos];\n        this.ships[shipIndex].pos = [-10, -10, true];\n        this.shipLocs = this.updateShipLocs();\n        try {\n            this.ships[shipIndex].pos = [x, y, horizontal];\n            this.shipLocs = this.updateShipLocs();\n            return true;\n        } catch(err) {\n            this.ships[shipIndex].pos = [...oldPos];\n            this.shipLocs = this.updateShipLocs();\n            return false;\n        }\n    }\n\n    rotateShip(shipIndex) {\n        this.placeShip(shipIndex, this.ships[shipIndex].pos[0], this.ships[shipIndex].pos[1], !this.ships[shipIndex].pos[2])\n    }\n\n    placeShipsRandom() {\n        for(let i = 0; i < this.ships.length; i++) {\n            while (true) {\n                const newCoords = [Math.floor(Math.random() * this.size), Math.floor(Math.random() * this.size), Math.random() > 0.5];\n                const result = this.placeShip(i, ...newCoords);\n                if (result) break;\n            }\n        }\n    }\n\n    receiveAttack(x, y) {\n        if (x < 0 || x > this.size || y < 0 || y > this.size) throw Error('Illegal Argument Exception');\n        if (this.hitMatrix[x][y]) throw Error('Already attacked');\n        this.hitMatrix[x][y] = true;\n        const success = this.shipLocs[x][y];\n        if (success !== false) {\n            const shipHit = this.ships[success];\n            const location = shipHit.pos[2] ? x - shipHit.pos[0] : y - shipHit.pos[1];\n            shipHit.ship.hit(location);\n            if (shipHit.ship.isSunk()) this.sunken ++;\n            return true;\n        }\n        return false;\n    }\n\n    allSunk() {\n        return this.sunken === this.ships.length;\n    }\n\n    updateShipLocs() {\n        const shipLocs = [];\n        let row;\n        for (let i = 0; i < this.size; i++) {\n            row = Array(this.size).fill(false);\n            shipLocs.push(row);\n        }\n        this.ships.forEach((obj, idx) => {\n            if (obj.pos[0] < 0) return;\n            if (obj.pos[2]) {\n                for (let i = 0; i < obj.ship.length; i++) { \n                    if (shipLocs[obj.pos[0] + i][obj.pos[1]] !== false) throw Error('collision');\n                    shipLocs[obj.pos[0] + i][obj.pos[1]] = idx;\n                }\n            } else {\n                for (let j = 0; j < obj.ship.length; j++) {\n                    if (shipLocs[obj.pos[0]][obj.pos[1] + j] !== false) throw Error('collision');\n                    shipLocs[obj.pos[0]][obj.pos[1] + j] = idx;\n                }\n            }\n        });\n        return shipLocs;\n    }\n}\n\nexport default Gameboard;","import Gameboard from './Gameboard';\n\nclass Player {\n    constructor() {\n        this.oppBoard = new Gameboard();\n    }\n\n    getBoard() {\n        return {...this.oppBoard};\n    }\n\n    randomize() {\n        this.oppBoard.placeShipsRandom();\n    }\n\n    attack(row, col) {\n        return this.oppBoard.receiveAttack(row, col); \n    }\n\n    randomAttack() {\n        const coords = [Math.floor(Math.random() * this.oppBoard.size), Math.floor(Math.random() * this.oppBoard.size)];\n        try {\n            return this.oppBoard.receiveAttack(...coords);\n        } catch(err) {\n            return this.randomAttack();\n        }\n    }\n\n    wonGame() {\n        return this.oppBoard.allSunk();\n    }\n}\n\nexport default Player;\n","import React from 'react';\nimport Player from '../game/Player';\nimport './board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        const plyr = new Player();\n        this.state = {player: plyr, dragging: false};\n        this.handleClick = this.handleClick.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n    }\n\n    shouldComponentUpdate() {\n        return !this.props.winner;\n    }\n\n    handleClick(i, j) {\n        if(this.props.cpu && this.props.pregame) {\n            if (this.state.player.getBoard().shipLocs[i][j] !== false) {\n                this.state.player.oppBoard.rotateShip(this.state.player.getBoard().shipLocs[i][j]);\n                this.setState({...this.state});\n            }\n        }\n        if (this.props.cpu || this.props.turn || this.props.pregame) return;\n        try {\n            this.state.player.attack(i, j);\n            this.setState({...this.state});\n            this.props.nextTurn(this.state.player.wonGame());\n        }\n        catch (err) {\n            console.log(\"Location already clicked\");\n        }\n      }\n\n    \n    handleDrag(i, j) {\n        if(!this.props.cpu || !this.props.pregame || this.state.player.getBoard().shipLocs[i][j] === false) return;\n        this.setState({...this.state, dragging: this.state.player.getBoard().shipLocs[i][j]});\n    }\n\n    handleDrop(i, j) {\n        if(!this.props.cpu || !this.props.pregame) return;\n        this.state.player.oppBoard.placeShip(this.state.dragging, i, j, this.state.player.oppBoard.ships[this.state.dragging].pos[2]);\n        this.setState({...this.state, dragging: false});\n    }\n\n    componentDidMount() {\n        if (!this.props.cpu && this.props.pregame) {\n            this.state.player.randomize();\n        }\n    }\n    \n    componentDidUpdate() {\n        if (this.props.cpu && this.props.turn) {\n            this.state.player.randomAttack();\n            this.setState({...this.state});\n            this.props.nextTurn(this.state.player.wonGame());\n        }\n    }\n\n    render() {\n        const squares = [];\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                let color = '';\n                let inner = '';\n                if (this.props.cpu && this.state.player.getBoard().shipLocs[i][j] !== false){\n                    color = 'ship';\n                }\n                if (this.state.player.getBoard().shipLocs[i][j] !== false && this.state.player.oppBoard.ships[this.state.player.getBoard().shipLocs[i][j]].ship.isSunk()){\n                    color = 'sunken';\n                    inner = 'X';\n                }\n                else if (this.state.player.getBoard().shipLocs[i][j] !== false && this.state.player.getBoard().hitMatrix[i][j]) {\n                    color = 'hit';\n                    inner = 'X';\n                }\n                else if (this.state.player.getBoard().hitMatrix[i][j]){\n                    inner = '.';\n                }\n            squares.push(<div key={[i, j]} className={color} draggable={this.state.player.getBoard().shipLocs[i][j] !== false}\n                onDragStart={()=> this.handleDrag(i, j)}\n                onDragOver={(e)=> e.preventDefault()}\n                onClick={()=> this.handleClick(i,j)} \n                onDrop={() => this.handleDrop(i,j)}>{inner}</div>)\n            }\n        }\n        return <div className = 'container'>{squares}</div>;\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {turn: false, pregame: true, winner: ''};\n    this.nextTurn = this.nextTurn.bind(this);\n  }\n\n  nextTurn(boardWinner) {\n    this.setState({...this.state, turn: !this.state.turn, winner: this.state.winner || (boardWinner ? 'Game Over' : '')});\n  }\n\n\n  startGame = () => {\n    if(this.state.pregame) {\n      this.setState({...this.state, pregame: false});\n    }\n  }\n\n  render() {\n    return ( \n      <div className=\"App\">\n        <h1>Battleship</h1>\n        <div className=\"boards\">\n          <Board pregame={this.state.pregame} cpu={true} nextTurn={this.nextTurn} turn={this.state.turn} winner={!!this.state.winner}/>\n          <Board pregame={this.state.pregame} cpu={false} nextTurn={this.nextTurn} turn={this.state.turn} winner={!!this.state.winner}/>\n        </div>\n        <button onClick={this.startGame}>Start Game</button>\n        <h2>{this.state.winner}</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}